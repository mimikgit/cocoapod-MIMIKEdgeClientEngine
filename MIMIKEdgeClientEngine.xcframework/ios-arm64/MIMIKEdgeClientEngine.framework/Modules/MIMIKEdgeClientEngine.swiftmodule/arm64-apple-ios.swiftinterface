// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MIMIKEdgeClientEngine
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Alamofire
import Foundation
import MIMIKEdgeClientCore
@_exported import MIMIKEdgeClientEngine
import Swift
import SwiftyJSON
import UIKit
import _Concurrency
import _StringProcessing
@objc final public class MIMIKEdgeClientEdgeEngine : ObjectiveC.NSObject {
  required public init?(monitorAppStates: Swift.Bool = true)
  @objc deinit
}
extension MIMIKEdgeClientEngine.MIMIKEdgeClientEdgeEngine {
  public static let kEdgeEngineExpectedVersion: Swift.String
  final public class func edgeEngineExpectedVersion() -> Swift.String
  final public class func setCustomPortNumber(number: Swift.Int32) -> Swift.Bool
  #if compiler(>=5.3) && $AsyncAwait
  final public func startEdgeEngine(startupParameters: MIMIKEdgeClientEngine.MIMIKStartupParameters) async -> Swift.Result<Swift.Bool, Foundation.NSError>
  #endif
  final public func stopEdgeEngine()
  final public func eraseEdgeEngineContent() -> Swift.Bool
  final public func edgeEngineIsRunning() -> Swift.Bool
  final public func currentEdgeEngineStartupParameters() -> MIMIKEdgeClientEngine.MIMIKStartupParameters
}
@objc public class MIMIKStartupParameters : ObjectiveC.NSObject, Foundation.NSCoding, Swift.Codable {
  public enum LogLevel : Swift.String, Swift.Codable {
    case trace
    case debug
    case info
    case warn
    case error
    case critical
    case off
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum NodeInfoLevel : Swift.String, Swift.Codable {
    case on
    case off
    case name
    case hwInfoOnly
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum LocalDiscovery : Swift.String, Swift.Codable {
    case on
    case off
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var logLevel: MIMIKEdgeClientEngine.MIMIKStartupParameters.LogLevel
  public var nodeInfoLevel: MIMIKEdgeClientEngine.MIMIKStartupParameters.NodeInfoLevel
  public var nodeName: Swift.String
  public var localDiscovery: MIMIKEdgeClientEngine.MIMIKStartupParameters.LocalDiscovery
  public var license: Swift.String
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  public init(license: Swift.String, logLevel: MIMIKEdgeClientEngine.MIMIKStartupParameters.LogLevel = .error, nodeInfoLevel: MIMIKEdgeClientEngine.MIMIKStartupParameters.NodeInfoLevel = .off, nodeName: Swift.String = UIDevice.current.name + "-" + UIDevice.current.model, localDiscovery: MIMIKEdgeClientEngine.MIMIKStartupParameters.LocalDiscovery = .off)
  @objc required convenience public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class MIMIKNode : ObjectiveC.NSObject, Foundation.NSCoding, Swift.Codable {
  public var id: Swift.String?
  public var name: Swift.String?
  public var accountId: Swift.String?
  public var os: Swift.String?
  public var url: Swift.String?
  public var routing: MIMIKEdgeClientCore.MIMIKNodeRouting?
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  public init(id: Swift.String?, name: Swift.String?, accountId: Swift.String?, os: Swift.String?, url: Swift.String?, routing: MIMIKEdgeClientCore.MIMIKNodeRouting?)
  @objc required convenience public init?(coder aDecoder: Foundation.NSCoder)
  public class func defaultNodeName() -> Swift.String
  @objc public func encode(with aCoder: Foundation.NSCoder)
  public func isCurrentNode(nodeName: Swift.String) -> Swift.Bool
  public func defaultNodeName() -> Swift.String
  public func effectiveUrl() -> Foundation.URL?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension MIMIKEdgeClientEngine.MIMIKStartupParameters.LogLevel : Swift.Equatable {}
extension MIMIKEdgeClientEngine.MIMIKStartupParameters.LogLevel : Swift.Hashable {}
extension MIMIKEdgeClientEngine.MIMIKStartupParameters.LogLevel : Swift.RawRepresentable {}
extension MIMIKEdgeClientEngine.MIMIKStartupParameters.NodeInfoLevel : Swift.Equatable {}
extension MIMIKEdgeClientEngine.MIMIKStartupParameters.NodeInfoLevel : Swift.Hashable {}
extension MIMIKEdgeClientEngine.MIMIKStartupParameters.NodeInfoLevel : Swift.RawRepresentable {}
extension MIMIKEdgeClientEngine.MIMIKStartupParameters.LocalDiscovery : Swift.Equatable {}
extension MIMIKEdgeClientEngine.MIMIKStartupParameters.LocalDiscovery : Swift.Hashable {}
extension MIMIKEdgeClientEngine.MIMIKStartupParameters.LocalDiscovery : Swift.RawRepresentable {}
